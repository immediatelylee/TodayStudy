1.controller에서 view로 데이터 를 전달하는 방법

controller에서 데이터를 가공하고, 이를 view에 넘겨 페이지에 표시한다. 

1. model객체를 파라미터로 받아 데이터를 넘긴다. 
hashMap형태로 데이터를 key-value꼴로 put해준다(addAttribute)
-> 그래서 강의에서 addAttribute 설명하면서 키값이라고 얘기한거였구나. key-value형태니까

이를 servlet에서 request 객체에 속성을 (key-value)꼴로 담고 다음 view jsp로 forwarding하는 꼴이라고 생각하면 쉽다. 

2. ModelAndView

또는 ModelAndView객체로 직접 view에 데이터를 넣어 직접 반환할 수 도 있다. 
Model은 Spring에서 알아서 주입해주지만, ModelAndView는 직접 생성해야 한다. 


https://www.ecsimsw.com/entry/Spring-Controller%EC%97%90%EC%84%9C-View%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%84%EB%8B%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95

<div>총 건수 : <span th:text="${#lists.size(boards)}"></span></div>
    div태그에 총 건수를 th:text로 표현해야함 ->  BoardController에서 List로 넘어온것이 Board인데 리스트의 데이터를 조작하기 위해서
    타임리프의 문법을 이용해야함.  타임리프 닥스에서 list검색했을때 size를 구할수 있는 가이드 나옴 -> 붙이기 
    ***lists.size(전달받은 리스트)***


디버그
벌레모양 클릭 이후 - run - step-over 
기존에는 그냥 f8 f9 이렇게 단축키만 사용

[old]
    @PostMapping("/form")
    public String greetingSubmit(@ModelAttribute Board board) {
        boardRepository.save(board);
//      spring guidence handling form submission
//      강의 - 값을 뿌려주고 list로 가야 하기 때문에 redirect를 써야한다
        return "redirect:/board/list";
//        return "/board/list";
    }

[new]
//    https://spring.io/guides/gs/validating-form-input/
    @PostMapping("/form")
    public String greetingSubmit(@Valid Board board, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "board/form";
        }
        boardRepository.save(board);
        return "redirect:/board/list";
    }
https://spring.io/guides/gs/validating-form-input/



https://getbootstrap.com/docs/5.0/forms/validation/
에서 servier side 확인에서 validation 에러 났을때 폼 keeping

spring validation guide에서 thymeleaf 예제 확인 


<td th:if="${#fields.hasErrors('name')}" th:errors="*{name}">Name Error</td>
을 이용하여 th설정

validator를 만들어서 이노테이션 말고 valid 체크를 하는법. 
https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/validation.html

public class PersonValidator implements Validator {

    /**
    * This Validator validates *just* Person instances
    */
    public boolean supports(Class clazz) {
        return Person.class.equals(clazz);
    }

    public void validate(Object obj, Errors e) {
        ValidationUtils.rejectIfEmpty(e, "name", "name.empty");
        Person p = (Person) obj;
        if (p.getAge() < 0) {
            e.rejectValue("age", "negativevalue");
        } else if (p.getAge() > 110) {
            e.rejectValue("age", "too.darn.old");
        }
    }
}

서포츠 어떤 클래스를 벨리데이션 할건지 true false 출력하고

밑에 validate가 검증하는 메소드임
object obj가 들어오는데 
그 밑에 utils rejectIf... 가 name이 필드이며 필드값이 qldjdlTekaus 메시지맵에 키(name.empty)를 전달함 
맵형태이므로 key-value 형태임  key가 없드면 3번째 파라미터를 추가해서 받을수 있음. 


    @Override
    public void validate(Object obj, Errors errors) {
        Board b =(Board) obj;
        if(StringUtils.isEmpty(b.getContent())){
            errors.rejectValue("content","key","내용을 입력하세요");
        }
        이런식으로 변형시켰는데  우리는 key값이 없기 때문에 3번째에 내용을 입력하세요 라고 key값이 없을때 나오는 대체 문구를 만들어준다. 


validator를 직접 만들어서 해봄 
https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/validation.html
spring boot validator로 검색해서 나옴

public class PersonValidator implements Validator {

    /**
    * This Validator validates *just* Person instances
    */
    public boolean supports(Class clazz) {
        return Person.class.equals(clazz);
    }

    public void validate(Object obj, Errors e) {
        ValidationUtils.rejectIfEmpty(e, "name", "name.empty");
        Person p = (Person) obj;
        if (p.getAge() < 0) {
            e.rejectValue("age", "negativevalue");
        } else if (p.getAge() > 110) {
            e.rejectValue("age", "too.darn.old");
        }
    }
}
이게 원본 

@Component
public class BoardValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return Board.class.equals(clazz);
    }

    @Override
    public void validate(Object obj, Errors errors) {
        Board b =(Board) obj;
        if(StringUtils.isEmpty(b.getContent())){
            errors.rejectValue("content","key","내용을 입력하세요");
        }

    }
}
이렇게 변형시킴  Autowird받게 컴포넌트 등록하고 (DI)
Board클래스 를 넣어야 할 클래스마다 대입
Board로 형변환을 시키고 obj를 b에 저장 b의 정보중에 빈부분이 있으면 (내용부분) 내용을 입력하세요가 출력되겠금함.


BoardController에 원래 있던 post부분에 boardValidator추가함


    @Autowired
    private BoardValidator boardValidator;
    도 걸고

    @PostMapping("/form")
    public String greetingSubmit(@Valid Board board, BindingResult bindingResult) {
        boardValidator.validate(board,bindingResult);
        if (bindingResult.hasErrors()) {
            return "board/form";
        }
        boardRepository.save(board);
        return "redirect:/board/list";
    }

이렇게 변경


BoardRestAPI도 만들어봄 
spring boot tutorial 에있는 building restApi with spring 참조

샘플을 복사해서 가져다 쓸때 유용한것이 
ctrl + r이다  여기에 employee를 전부 board로 바꿀수 있다. 찾아서 바꾸기 기능


필드명 안맞는 getter 나 setter맞춰주고 

            return repository.findById(id).orElse(null);
                    
                    .orElseThrow(() -> new BoardNotFoundException(id));

findById뒤에 그냥 에러처리 안하고 orElse로 변경하였다. 

/api/boards로 findall이 동작하는지 확인

예제에 repository가 final로 되어 있어서 오류남 
final제거해주고 다시 
@Autowired가 선언되어있는데 final이 있어서 인듯. 
다시 확인
 